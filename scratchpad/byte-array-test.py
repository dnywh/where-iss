# *****************************************************************************
# * | File        :	  Pico_ePaper-5.83.py
# * | Author      :   Waveshare team
# * | Function    :   Electronic paper driver
# * | Info        :
# *----------------
# * | This version:   V1.0
# * | Date        :   2021-05-27
# # | Info        :   python demo
# -----------------------------------------------------------------------------
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documnetation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to  whom the Software is
# furished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS OR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

from machine import Pin, SPI
import framebuf
import utime

# Display resolution
EPD_WIDTH = 648
EPD_HEIGHT = 480

RST_PIN = 12
DC_PIN = 8
CS_PIN = 9
BUSY_PIN = 13

# Raspberry Pi logo as 32x32 bytearray
# buffer = bytearray(b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|?\x00\x01\x86@\x80\x01\x01\x80\x80\x01\x11\x88\x80\x01\x05\xa0\x80\x00\x83\xc1\x00\x00C\xe3\x00\x00~\xfc\x00\x00L'\x00\x00\x9c\x11\x00\x00\xbf\xfd\x00\x00\xe1\x87\x00\x01\xc1\x83\x80\x02A\x82@\x02A\x82@\x02\xc1\xc2@\x02\xf6>\xc0\x01\xfc=\x80\x01\x18\x18\x80\x01\x88\x10\x80\x00\x8c!\x00\x00\x87\xf1\x00\x00\x7f\xf6\x00\x008\x1c\x00\x00\x0c \x00\x00\x03\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
buffer = bytearray(b"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc3\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7d\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xfe\x8f\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x9a\x77\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfb\x74\xf7\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfb\x6d\x37\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xed\xcf\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf6\xdd\xdf\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\xf9\xdf\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xed\xb8\x3f\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xef\xd7\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xeb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf7\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf7\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf7\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb7\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb7\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xe7\xff\xff\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xdb\xff\xff\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xdd\xff\xff\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xdd\xff\xff\x6f\xff\xfd\x7f\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xed\xff\xff\x6f\xff\xfb\xbf\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xfe\x66\x00\xff\x6f\xff\x97\xbf\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xfe\xff\xff\x9f\x6f\xff\x7b\xbf\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xfe\xfe\x39\xf3\x6f\xff\x7f\x37\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\x05\xff\x7d\x6f\xff\x1f\xf7\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xbb\xff\xdf\x6f\xe3\xff\xcf\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\x77\xff\xef\xef\x3f\xc7\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\x6f\xff\xf7\xf9\xfe\x7f\xc7\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\x3f\xff\xff\xf7\xf3\xff\x7f\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\x0f\x38\xfb\xff\x9f\xfe\xf7\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xfe\xf1\xff\xbd\xfc\xfe\x07\xe7\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xf9\x07\xcd\xf3\x8f\xfc\x07\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xfe\x04\xf9\xf7\xec\xff\x0d\xfb\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xdd\x7e\xfa\xe3\xf9\xfd\x33\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xdb\xfe\xfd\xff\xef\xfd\xcf\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xc3\xbf\x7f\xff\xdf\xfe\xef\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xfb\x7f\xbf\xff\xbf\xfe\x4f\xff\xff\xff\x01\xff\xff\xc0\xff\xff\xff\x39\xff\xff\xff\xff\xff\xbf\xff\x7f\xff\xff\xff\xff\xfc\xfe\x7f\xff\xc0\xff\xff\xfd\xfe\x7f\xf9\x9f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfb\xff\xbf\xff\xc0\xff\xff\xfb\xff\xbf\xf7\xe8\xff\xff\xdf\xfe\xff\xff\xff\xff\xff\xf7\xef\xdf\xff\xc0\xff\xff\xf7\x8f\xdf\xcf\xff\x7f\xff\xdf\xfd\xff\xff\xff\xff\xff\xef\x7d\xff\xff\xc0\xff\xff\xee\xf9\xdf\xdf\xff\x7f\xff\xff\xfd\xff\xff\xff\xff\xff\xdd\xff\x6f\xff\xc0\xff\xff\xfb\xfe\xef\xb9\x7e\xff\xff\xef\xff\xff\xff\xff\xff\xff\xdb\xff\x6f\xff\xc0\xff\xff\xdb\xff\x7f\x76\xf9\xff\xff\xef\xfb\xff\xff\xff\xff\xff\xb7\xff\xbf\xff\xc0\xff\xff\xdf\xff\x77\x6e\xfd\xff\xff\xef\xfb\xff\xff\xff\xff\xff\xbf\xff\xb7\xff\xc0\xff\xff\xf7\xff\xb7\xed\xdd\xff\xff\xef\xff\xff\xff\xff\xff\xff\x6f\xff\xb7\xff\xc0\xff\xff\xb7\xff\xbe\xde\xab\xff\xff\xef\xf7\xff\xff\xff\xff\xff\x7f\xff\xb7\xff\xc0\xff\xff\xb7\xff\xfa\xdf\x7f\xff\xff\xef\xf7\xff\xff\xff\xff\xff\xdf\xff\xb7\xff\xc0\xff\xff\xb7\xff\xdb\xff\xff\xff\xff\xef\xf7\xff\xff\xff\xff\xfe\xdf\xff\xb7\xff\xc0\xff\xff\x3b\xff\xdd\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb7\xff\xc0\xff\xfe\xfc\xff\xdd\xbf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbf\xff\x73\xff\xc0\xff\xfd\xfe\xff\xfd\xbf\xff\xff\xff\xef\xef\xff\xff\xff\xff\xfd\xbf\xfd\xfd\xff\xc0\xff\xfd\xd7\x7f\xed\xbf\xcf\xff\xff\xef\xef\xff\xff\xff\xff\xfd\xbf\xfb\xff\xff\xc0\xff\xff\xbb\x7f\xed\xbe\x73\xff\xff\xef\xef\xff\xff\xff\xff\xff\xff\xf7\xb7\x7f\xc0\xff\xfd\x5c\x7f\xef\xbd\xfc\xff\xff\xef\xff\xff\xff\xff\xff\xfb\xff\xff\x77\xbf\xc0\xff\xff\xc7\xff\xef\xbb\x9f\x7f\xff\xff\xff\xff\xff\xff\xff\xfb\x7f\xfe\x73\x7f\xc0\xff\xff\xff\xff\xef\xb7\x6f\xbf\xff\xdf\xff\xff\xff\xff\xff\xff\x7f\xfb\xf6\xff\xc0\xff\xff\xff\xff\xef\xae\xdf\xdf\xff\xd0\xc7\xff\xff\xff\xff\xff\x7f\xff\xcf\xff\xc0\xff\xff\xff\xff\xef\xad\xbe\xbf\xfe\x1f\xfc\xff\xff\xff\xff\xf7\x7f\xff\xff\xff\xc0\xff\xff\xe0\xff\xef\xdd\x6e\x7f\xe3\xff\xff\x9f\xfe\x0f\xff\xf7\xff\xff\xff\xff\xc0\xff\xff\xdf\xbf\xef\xbb\x6e\xfe\x3f\xff\xff\xe7\xfd\xf3\xff\xfe\xff\xff\xff\xff\xc0\xff\xff\xbf\xcf\xef\xbb\x9e\xfb\xff\xff\xff\xfc\x1d\xfd\xff\xfe\xff\xff\xff\xff\xc0\xff\xff\x79\xf7\xef\xbb\xf1\xff\xff\xff\xff\xff\xfe\xfe\x7f\xee\xff\xff\xff\xff\xc0\xff\xff\x6f\x77\xef\xbf\xff\xff\xff\xff\xff\xff\xff\xbf\xbf\xef\xff\xff\xff\xff\xc0\xff\xff\xdf\xbb\xef\xf7\xff\xff\xff\xff\xff\xff\xff\xef\xdf\xef\xff\xff\xff\xff\xc0\xff\xff\xdf\xdd\xef\xf7\xff\xff\xff\xff\xff\xff\xff\xfb\xef\xfd\xff\xff\xff\xff\xc0\xff\xff\xdf\xed\xef\xf7\xff\xff\xff\xff\xff\xff\xff\xfc\xff\xdd\xff\xc1\xff\xff\xc0\xff\xfe\xdf\xf6\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\x77\xdd\xf8\xff\x7f\xff\xc0\xff\xfe\xdf\xf6\xef\xef\xff\xff\xff\xff\xff\xff\xff\xff\xbb\xdf\xef\xff\x7f\xff\xc0\xff\xfb\xef\xfb\x6f\xef\xff\xff\xff\xff\xff\xff\xf3\x87\xdd\xdb\xbf\xc0\xff\xff\xc0\xff\xe7\xf7\xff\x6f\xef\x9d\xff\xff\xff\xff\xff\xef\xf9\xef\xfa\xfe\x7f\xff\xff\xc0\xff\xed\xb7\xfd\xaf\xef\x7e\xc7\xff\xff\xff\xff\xef\xff\x76\xb9\xf3\xff\xff\xff\xc0\xff\xdd\xbb\xfd\xaf\xee\xc7\x3b\xff\xff\xff\xff\xef\xff\xbb\xbb\xcf\xfb\xff\xff\xc0\xff\xd9\x97\xff\xaf\xfd\xa7\xff\xff\xff\xff\xff\xf8\x3f\xef\x7f\xbf\x1e\x7f\xff\xc0\xff\xee\x7f\xfe\xef\xdb\x6f\xe7\xff\xff\xff\xff\xff\xf7\xf5\xff\x79\xff\x7f\xff\xc0\xff\xff\xff\xfe\xcf\xdf\x5f\x9f\xff\xff\xff\xff\xff\xfd\xfe\xfe\xef\xf8\x7f\xff\xc0\xff\xff\xff\xff\xcf\xd6\xb3\xbf\xff\xff\xff\xff\xff\xff\x7a\xfd\x9f\x1f\xff\xff\xc0\xff\xff\xe1\xff\xcf\xce\xb3\xbf\xff\xff\xff\xff\xff\xff\xbd\xfb\x79\xff\xff\xff\xc0\xff\xff\x3f\x3f\x6f\xcd\xcc\xff\xff\xff\xff\xff\xff\xff\xde\x7a\xe6\x3e\xff\xff\xc0\xff\xfe\xff\xcf\x6f\xdd\xff\xff\xff\xff\xff\xff\xfc\xf9\xee\x7d\xd9\xff\x7f\xff\xc0\xff\xfc\xe0\xf7\x6f\xdf\xff\xff\xff\xff\xff\xff\xfb\xff\x77\x73\x27\xc7\x7f\xff\xc0\xff\xfd\x9f\xbb\x6f\xfb\xff\xff\xff\xff\xff\xff\xf7\xff\xdb\xf6\x5e\x7f\xff\xff\xc0\xff\xfb\xbf\xdd\xef\xfb\xff\xff\xff\xff\xff\xff\xfb\xff\xeb\xfe\xb9\xff\xff\xff\xc0\xff\xfb\x7f\xee\xff\xbf\xff\xff\xff\xff\xff\xff\xfc\x03\xf1\xfd\x77\xff\xff\xff\xc0\xff\xfb\x7f\xf6\xbf\xb7\xff\xff\xff\xff\xff\xff\xff\x82\x79\xfa\xef\x3f\xff\xff\xc0\xff\xfb\x7f\xf7\xbf\xb7\xff\xff\xff\xff\xff\xff\xfe\xfe\xbd\xf9\xd9\xcf\xff\xff\xc0\xff\xf7\x3f\xfb\x3f\xb7\xff\xff\xff\xff\xff\xff\xfb\xff\xae\xfb\xa7\xef\xff\xff\xc0\xff\xe7\xdf\xff\xbf\xaf\xff\xff\xff\xff\xff\xff\xfb\xff\xc6\xff\x5f\xef\xff\xff\xc0\xff\xdf\xef\xfd\xbf\xef\xff\xff\xff\xff\xff\xff\xf7\x81\xf7\xff\xbf\x9f\xff\xff\xc0\xff\xbb\x7f\xfd\xbf\xef\xff\xff\xff\xff\xff\xff\xf7\x7e\xfb\xfe\x7c\x7f\xff\xff\xc0\xff\x77\x77\xfe\xbf\xff\xff\xff\xff\xff\xff\xff\xfa\xff\x79\xfc\xf1\xff\xff\xff\xc0\xff\xe7\x0f\xfe\xbf\x5f\xff\xff\xff\xff\xff\xff\xff\xff\x7d\xfd\xef\xff\xff\xff\xc0\xff\x97\x7f\xfe\xff\x5f\xff\xff\xff\xff\xff\xff\xff\xff\xbe\xfb\xdf\xff\xff\xff\xc0\xff\xfa\x7f\xfe\xff\xdf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfb\xbf\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdf\xff\x7f\xff\xff\xff\xc0\xff\xff\xff\xff\x7f\xbf\xff\xff\xff\xff\xff\xff\xff\xff\xdf\xff\x7f\xff\xff\xff\xc0\xff\xff\xff\xff\x7f\xbf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff\xff\xc0\xff\xff\xff\xff\x7f\xbf\xff\xff\xff\xff\xff\xff\xff\xff\xef\xfe\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xbf\xff\xff\xff\xff\xff\xff\xff\xff\xef\xfd\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xef\xfd\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xbf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xef\xfd\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xbf\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xef\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xbf\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfb\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xbf\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xdf\xdb\xff\xff\xff\xff\xc0\xff\xff\xff\xfc\x7f\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xd0\xf8\xff\xff\xff\xff\xc0\xff\xff\xff\xe7\xff\xf9\xff\xff\xff\xff\xff\xff\xff\xff\x8f\xff\xbf\xff\xff\xff\xc0\xff\xff\xff\x3f\xff\xff\x3f\xff\xff\xff\xff\xff\xff\xfe\x7f\xff\xe7\xff\xff\xff\xc0\xff\xff\xf9\xff\xff\xff\xf1\xff\xff\xff\xff\xff\xff\xf3\xff\xff\xfc\xff\xff\xff\xc0\xff\xfc\x0f\xff\xff\xff\xff\xbf\xff\xff\xff\xff\xff\x1f\xff\xff\xff\x8f\xff\xff\xc0")


fb = framebuf.FrameBuffer(buffer, 162, 120, framebuf.MONO_HLSB)


class EPD_5in83(framebuf.FrameBuffer):
    def __init__(self):
        self.reset_pin = Pin(RST_PIN, Pin.OUT)

        self.busy_pin = Pin(BUSY_PIN, Pin.IN, Pin.PULL_UP)
        self.cs_pin = Pin(CS_PIN, Pin.OUT)
        self.width = EPD_WIDTH
        self.height = EPD_HEIGHT

        self.spi = SPI(1)
        self.spi.init(baudrate=4000_000)
        self.dc_pin = Pin(DC_PIN, Pin.OUT)

        self.buffer = bytearray(self.height * self.width // 8)
        super().__init__(self.buffer, self.width, self.height, framebuf.MONO_HLSB)
        self.init()

    def digital_write(self, pin, value):
        pin.value(value)

    def digital_read(self, pin):
        return pin.value()

    def delay_ms(self, delaytime):
        utime.sleep(delaytime / 1000.0)

    def spi_writebyte(self, data):
        self.spi.write(bytearray(data))

    def module_exit(self):
        self.digital_write(self.reset_pin, 0)

    # Hardware reset
    def reset(self):
        self.digital_write(self.reset_pin, 1)
        self.delay_ms(50)
        self.digital_write(self.reset_pin, 0)
        self.delay_ms(2)
        self.digital_write(self.reset_pin, 1)
        self.delay_ms(50)

    def send_command(self, command):
        self.digital_write(self.dc_pin, 0)
        self.digital_write(self.cs_pin, 0)
        self.spi_writebyte([command])
        self.digital_write(self.cs_pin, 1)

    def send_data(self, data):
        self.digital_write(self.dc_pin, 1)
        self.digital_write(self.cs_pin, 0)
        self.spi_writebyte([data])
        self.digital_write(self.cs_pin, 1)

    def send_data2(self, data):
        self.digital_write(self.dc_pin, 1)
        self.digital_write(self.cs_pin, 0)
        self.spi_writebyte(data)
        self.digital_write(self.cs_pin, 1)

    def ReadBusy(self):
        print("e-Paper busy")
        while (self.digital_read(self.busy_pin) == 0):  # 1: idle, 0: busy
            self.delay_ms(10)
        print("e-Paper busy release")

    def TurnOnDisplay(self):
        self.send_command(0x12)
        self.delay_ms(100)
        self.ReadBusy()

    def init(self):
        # EPD hardware init start
        self.reset()

        self.send_command(0x01)  # POWER SETTING
        self.send_data(0x07)
        self.send_data(0x07)  # VGH=20V,VGL=-20V
        self.send_data(0x3f)  # VDH=15V
        self.send_data(0x3f)  # VDL=-15V

        self.send_command(0x04)  # POWER ON
        self.delay_ms(100)
        self.ReadBusy()  # waiting for the electronic paper IC to release the idle signal

        self.send_command(0X00)  # PANNEL SETTING
        self.send_data(0x1F)  # KW-3f   KWR-2F	BWROTP 0f	BWOTP 1f

        self.send_command(0x61)  # tres
        self.send_data(0x02)  # source 648
        self.send_data(0x88)
        self.send_data(0x01)  # gate 480
        self.send_data(0xE0)

        self.send_command(0X15)
        self.send_data(0x00)

        self.send_command(0X50)  # VCOM AND DATA INTERVAL SETTING
        self.send_data(0x10)
        self.send_data(0x07)

        self.send_command(0X60)  # TCON SETTING
        self.send_data(0x22)
        # EPD hardware init end
        return 0

    def display(self, image):
        if (image == None):
            return
        self.send_command(0x13)  # WRITE_RAM
        self.send_data2(image)
        self.TurnOnDisplay()

    def Clear(self, color):
        self.send_command(0x13)  # WRITE_RAM
        for j in range(0, self.height):
            for i in range(0, int(self.width / 8)):
                self.send_data(color)
        self.TurnOnDisplay()

    def sleep(self):
        self.send_command(0x02)  # DEEP_SLEEP_MODE
        self.ReadBusy()
        self.send_command(0x07)
        self.send_data(0xa5)

        self.delay_ms(2000)
        self.module_exit()


if __name__ == '__main__':
    epd = EPD_5in83()
    epd.Clear(0x00)

    epd.fill(0x00)
    # epd.text("Waveshare", 5, 10, 0xff)
    # epd.text("Pico_ePaper-5.83", 5, 40, 0xff)
    # epd.text("Raspberry Pico", 5, 70, 0xff)

    epd.blit(fb, 96, 96)

    epd.display(epd.buffer)
    epd.delay_ms(10000)

    # epd.vline(10, 90, 60, 0xff)
    # epd.vline(120, 90, 60, 0xff)
    # epd.hline(10, 90, 110, 0xff)
    # epd.hline(10, 150, 110, 0xff)
    # epd.line(10, 90, 120, 150, 0xff)
    # epd.line(120, 90, 10, 150, 0xff)
    # epd.display(epd.buffer)
    # epd.delay_ms(2000)

    # epd.rect(10, 180, 50, 80, 0xff)
    # epd.fill_rect(70, 180, 50, 80, 0xff)
    # epd.display(epd.buffer)
    # epd.delay_ms(2000)

    # epd.fill_rect(200, 100, 400, 100, 0xff)
    # epd.display(epd.buffer)
    # epd.delay_ms(2000)

    epd.init()
    epd.Clear(0x00)
    epd.delay_ms(2000)
    print("sleep")
    epd.sleep()
